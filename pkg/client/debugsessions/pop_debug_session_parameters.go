package debugsessions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPopDebugSessionParams creates a new PopDebugSessionParams object
// with the default values initialized.
func NewPopDebugSessionParams() *PopDebugSessionParams {
	var ()
	return &PopDebugSessionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPopDebugSessionParamsWithTimeout creates a new PopDebugSessionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPopDebugSessionParamsWithTimeout(timeout time.Duration) *PopDebugSessionParams {
	var ()
	return &PopDebugSessionParams{

		timeout: timeout,
	}
}

// NewPopDebugSessionParamsWithContext creates a new PopDebugSessionParams object
// with the default values initialized, and the ability to set a context for a request
func NewPopDebugSessionParamsWithContext(ctx context.Context) *PopDebugSessionParams {
	var ()
	return &PopDebugSessionParams{

		Context: ctx,
	}
}

// NewPopDebugSessionParamsWithHTTPClient creates a new PopDebugSessionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPopDebugSessionParamsWithHTTPClient(client *http.Client) *PopDebugSessionParams {
	var ()
	return &PopDebugSessionParams{
		HTTPClient: client,
	}
}

/*PopDebugSessionParams contains all the parameters to send to the API endpoint
for the pop debug session operation typically these are written to a http.Request
*/
type PopDebugSessionParams struct {

	/*XTimeout*/
	XTimeout *float64
	/*DebugConfigID
	  debug config id.

	*/
	DebugConfigID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the pop debug session params
func (o *PopDebugSessionParams) WithTimeout(timeout time.Duration) *PopDebugSessionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the pop debug session params
func (o *PopDebugSessionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the pop debug session params
func (o *PopDebugSessionParams) WithContext(ctx context.Context) *PopDebugSessionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the pop debug session params
func (o *PopDebugSessionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the pop debug session params
func (o *PopDebugSessionParams) WithHTTPClient(client *http.Client) *PopDebugSessionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the pop debug session params
func (o *PopDebugSessionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXTimeout adds the xTimeout to the pop debug session params
func (o *PopDebugSessionParams) WithXTimeout(xTimeout *float64) *PopDebugSessionParams {
	o.SetXTimeout(xTimeout)
	return o
}

// SetXTimeout adds the xTimeout to the pop debug session params
func (o *PopDebugSessionParams) SetXTimeout(xTimeout *float64) {
	o.XTimeout = xTimeout
}

// WithDebugConfigID adds the debugConfigID to the pop debug session params
func (o *PopDebugSessionParams) WithDebugConfigID(debugConfigID string) *PopDebugSessionParams {
	o.SetDebugConfigID(debugConfigID)
	return o
}

// SetDebugConfigID adds the debugConfigId to the pop debug session params
func (o *PopDebugSessionParams) SetDebugConfigID(debugConfigID string) {
	o.DebugConfigID = debugConfigID
}

// WriteToRequest writes these params to a swagger request
func (o *PopDebugSessionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XTimeout != nil {

		// header param X-Timeout
		if err := r.SetHeaderParam("X-Timeout", swag.FormatFloat64(*o.XTimeout)); err != nil {
			return err
		}

	}

	// path param debugConfigId
	if err := r.SetPathParam("debugConfigId", o.DebugConfigID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
