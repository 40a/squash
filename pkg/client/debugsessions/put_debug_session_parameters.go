package debugsessions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/solo-io/squash/pkg/models"
)

// NewPutDebugSessionParams creates a new PutDebugSessionParams object
// with the default values initialized.
func NewPutDebugSessionParams() *PutDebugSessionParams {
	var ()
	return &PutDebugSessionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutDebugSessionParamsWithTimeout creates a new PutDebugSessionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutDebugSessionParamsWithTimeout(timeout time.Duration) *PutDebugSessionParams {
	var ()
	return &PutDebugSessionParams{

		timeout: timeout,
	}
}

// NewPutDebugSessionParamsWithContext creates a new PutDebugSessionParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutDebugSessionParamsWithContext(ctx context.Context) *PutDebugSessionParams {
	var ()
	return &PutDebugSessionParams{

		Context: ctx,
	}
}

// NewPutDebugSessionParamsWithHTTPClient creates a new PutDebugSessionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutDebugSessionParamsWithHTTPClient(client *http.Client) *PutDebugSessionParams {
	var ()
	return &PutDebugSessionParams{
		HTTPClient: client,
	}
}

/*PutDebugSessionParams contains all the parameters to send to the API endpoint
for the put debug session operation typically these are written to a http.Request
*/
type PutDebugSessionParams struct {

	/*Body
	  the debug session.

	*/
	Body *models.DebugSession
	/*DebugConfigID
	  debug config id.

	*/
	DebugConfigID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put debug session params
func (o *PutDebugSessionParams) WithTimeout(timeout time.Duration) *PutDebugSessionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put debug session params
func (o *PutDebugSessionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put debug session params
func (o *PutDebugSessionParams) WithContext(ctx context.Context) *PutDebugSessionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put debug session params
func (o *PutDebugSessionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put debug session params
func (o *PutDebugSessionParams) WithHTTPClient(client *http.Client) *PutDebugSessionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put debug session params
func (o *PutDebugSessionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the put debug session params
func (o *PutDebugSessionParams) WithBody(body *models.DebugSession) *PutDebugSessionParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the put debug session params
func (o *PutDebugSessionParams) SetBody(body *models.DebugSession) {
	o.Body = body
}

// WithDebugConfigID adds the debugConfigID to the put debug session params
func (o *PutDebugSessionParams) WithDebugConfigID(debugConfigID string) *PutDebugSessionParams {
	o.SetDebugConfigID(debugConfigID)
	return o
}

// SetDebugConfigID adds the debugConfigId to the put debug session params
func (o *PutDebugSessionParams) SetDebugConfigID(debugConfigID string) {
	o.DebugConfigID = debugConfigID
}

// WriteToRequest writes these params to a swagger request
func (o *PutDebugSessionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body == nil {
		o.Body = new(models.DebugSession)
	}

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	// path param debugConfigId
	if err := r.SetPathParam("debugConfigId", o.DebugConfigID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
