package debugsessions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new debugsessions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for debugsessions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PopDebugSession waits and for a debug session is available when it is available it is returned and deleted

Long-poll and wait for a debug session to arrive.  The squash client will add a debug session to the debug config once a container associated with this  debug config generated a debug event.

*/
func (a *Client) PopDebugSession(params *PopDebugSessionParams) (*PopDebugSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPopDebugSessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "popDebugSession",
		Method:             "DELETE",
		PathPattern:        "/debugconfig/{debugConfigId}/session",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PopDebugSessionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PopDebugSessionOK), nil

}

/*
PutDebugSession adds a new debug session this is used by the squash client

When a debugger is attached, it should create a new debug session object under the debug config  that caused the debug session. Only one debug session is allowed per debug config. Once a  session is added, The service will stop being watched, and new debug configs for the same service can be created again.

*/
func (a *Client) PutDebugSession(params *PutDebugSessionParams) (*PutDebugSessionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDebugSessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putDebugSession",
		Method:             "PUT",
		PathPattern:        "/debugconfig/{debugConfigId}/session",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDebugSessionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutDebugSessionCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
