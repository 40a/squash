package debugsessions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/solo-io/squash/pkg/models"
)

// PopDebugSessionReader is a Reader for the PopDebugSession structure.
type PopDebugSessionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PopDebugSessionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPopDebugSessionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPopDebugSessionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPopDebugSessionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 408:
		result := NewPopDebugSessionRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPopDebugSessionOK creates a PopDebugSessionOK with default headers values
func NewPopDebugSessionOK() *PopDebugSessionOK {
	return &PopDebugSessionOK{}
}

/*PopDebugSessionOK handles this case with default header values.

Debug session returned
*/
type PopDebugSessionOK struct {
	Payload *models.DebugSession
}

func (o *PopDebugSessionOK) Error() string {
	return fmt.Sprintf("[DELETE /debugconfig/{debugConfigId}/session][%d] popDebugSessionOK  %+v", 200, o.Payload)
}

func (o *PopDebugSessionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DebugSession)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPopDebugSessionBadRequest creates a PopDebugSessionBadRequest with default headers values
func NewPopDebugSessionBadRequest() *PopDebugSessionBadRequest {
	return &PopDebugSessionBadRequest{}
}

/*PopDebugSessionBadRequest handles this case with default header values.

Invalid ID supplied
*/
type PopDebugSessionBadRequest struct {
}

func (o *PopDebugSessionBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /debugconfig/{debugConfigId}/session][%d] popDebugSessionBadRequest ", 400)
}

func (o *PopDebugSessionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPopDebugSessionNotFound creates a PopDebugSessionNotFound with default headers values
func NewPopDebugSessionNotFound() *PopDebugSessionNotFound {
	return &PopDebugSessionNotFound{}
}

/*PopDebugSessionNotFound handles this case with default header values.

debug config not found
*/
type PopDebugSessionNotFound struct {
}

func (o *PopDebugSessionNotFound) Error() string {
	return fmt.Sprintf("[DELETE /debugconfig/{debugConfigId}/session][%d] popDebugSessionNotFound ", 404)
}

func (o *PopDebugSessionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPopDebugSessionRequestTimeout creates a PopDebugSessionRequestTimeout with default headers values
func NewPopDebugSessionRequestTimeout() *PopDebugSessionRequestTimeout {
	return &PopDebugSessionRequestTimeout{}
}

/*PopDebugSessionRequestTimeout handles this case with default header values.

Timeout reached
*/
type PopDebugSessionRequestTimeout struct {
}

func (o *PopDebugSessionRequestTimeout) Error() string {
	return fmt.Sprintf("[DELETE /debugconfig/{debugConfigId}/session][%d] popDebugSessionRequestTimeout ", 408)
}

func (o *PopDebugSessionRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
