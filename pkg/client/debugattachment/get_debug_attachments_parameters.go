// Code generated by go-swagger; DO NOT EDIT.

package debugattachment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetDebugAttachmentsParams creates a new GetDebugAttachmentsParams object
// with the default values initialized.
func NewGetDebugAttachmentsParams() *GetDebugAttachmentsParams {
	var ()
	return &GetDebugAttachmentsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDebugAttachmentsParamsWithTimeout creates a new GetDebugAttachmentsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDebugAttachmentsParamsWithTimeout(timeout time.Duration) *GetDebugAttachmentsParams {
	var ()
	return &GetDebugAttachmentsParams{

		timeout: timeout,
	}
}

// NewGetDebugAttachmentsParamsWithContext creates a new GetDebugAttachmentsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDebugAttachmentsParamsWithContext(ctx context.Context) *GetDebugAttachmentsParams {
	var ()
	return &GetDebugAttachmentsParams{

		Context: ctx,
	}
}

// NewGetDebugAttachmentsParamsWithHTTPClient creates a new GetDebugAttachmentsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDebugAttachmentsParamsWithHTTPClient(client *http.Client) *GetDebugAttachmentsParams {
	var ()
	return &GetDebugAttachmentsParams{
		HTTPClient: client,
	}
}

/*GetDebugAttachmentsParams contains all the parameters to send to the API endpoint
for the get debug attachments operation typically these are written to a http.Request
*/
type GetDebugAttachmentsParams struct {

	/*XTimeout*/
	XTimeout *float64
	/*Names
	  Only get a subset of debugattachments

	*/
	Names []string
	/*Node
	  filter by node that the debugattachment is assigned to

	*/
	Node *string
	/*State
	  filter by the state of debugattachment is assigned to

	*/
	State *string
	/*States
	  filter by any of the states of the debugattachment (for example, attached and error)

	*/
	States []string
	/*Wait
	  wait until there's something to return instead of returning an empty list

	*/
	Wait *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get debug attachments params
func (o *GetDebugAttachmentsParams) WithTimeout(timeout time.Duration) *GetDebugAttachmentsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get debug attachments params
func (o *GetDebugAttachmentsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get debug attachments params
func (o *GetDebugAttachmentsParams) WithContext(ctx context.Context) *GetDebugAttachmentsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get debug attachments params
func (o *GetDebugAttachmentsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get debug attachments params
func (o *GetDebugAttachmentsParams) WithHTTPClient(client *http.Client) *GetDebugAttachmentsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get debug attachments params
func (o *GetDebugAttachmentsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXTimeout adds the xTimeout to the get debug attachments params
func (o *GetDebugAttachmentsParams) WithXTimeout(xTimeout *float64) *GetDebugAttachmentsParams {
	o.SetXTimeout(xTimeout)
	return o
}

// SetXTimeout adds the xTimeout to the get debug attachments params
func (o *GetDebugAttachmentsParams) SetXTimeout(xTimeout *float64) {
	o.XTimeout = xTimeout
}

// WithNames adds the names to the get debug attachments params
func (o *GetDebugAttachmentsParams) WithNames(names []string) *GetDebugAttachmentsParams {
	o.SetNames(names)
	return o
}

// SetNames adds the names to the get debug attachments params
func (o *GetDebugAttachmentsParams) SetNames(names []string) {
	o.Names = names
}

// WithNode adds the node to the get debug attachments params
func (o *GetDebugAttachmentsParams) WithNode(node *string) *GetDebugAttachmentsParams {
	o.SetNode(node)
	return o
}

// SetNode adds the node to the get debug attachments params
func (o *GetDebugAttachmentsParams) SetNode(node *string) {
	o.Node = node
}

// WithState adds the state to the get debug attachments params
func (o *GetDebugAttachmentsParams) WithState(state *string) *GetDebugAttachmentsParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the get debug attachments params
func (o *GetDebugAttachmentsParams) SetState(state *string) {
	o.State = state
}

// WithStates adds the states to the get debug attachments params
func (o *GetDebugAttachmentsParams) WithStates(states []string) *GetDebugAttachmentsParams {
	o.SetStates(states)
	return o
}

// SetStates adds the states to the get debug attachments params
func (o *GetDebugAttachmentsParams) SetStates(states []string) {
	o.States = states
}

// WithWait adds the wait to the get debug attachments params
func (o *GetDebugAttachmentsParams) WithWait(wait *bool) *GetDebugAttachmentsParams {
	o.SetWait(wait)
	return o
}

// SetWait adds the wait to the get debug attachments params
func (o *GetDebugAttachmentsParams) SetWait(wait *bool) {
	o.Wait = wait
}

// WriteToRequest writes these params to a swagger request
func (o *GetDebugAttachmentsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XTimeout != nil {

		// header param X-Timeout
		if err := r.SetHeaderParam("X-Timeout", swag.FormatFloat64(*o.XTimeout)); err != nil {
			return err
		}

	}

	valuesNames := o.Names

	joinedNames := swag.JoinByFormat(valuesNames, "")
	// query array param names
	if err := r.SetQueryParam("names", joinedNames...); err != nil {
		return err
	}

	if o.Node != nil {

		// query param node
		var qrNode string
		if o.Node != nil {
			qrNode = *o.Node
		}
		qNode := qrNode
		if qNode != "" {
			if err := r.SetQueryParam("node", qNode); err != nil {
				return err
			}
		}

	}

	if o.State != nil {

		// query param state
		var qrState string
		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {
			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}

	}

	valuesStates := o.States

	joinedStates := swag.JoinByFormat(valuesStates, "")
	// query array param states
	if err := r.SetQueryParam("states", joinedStates...); err != nil {
		return err
	}

	if o.Wait != nil {

		// query param wait
		var qrWait bool
		if o.Wait != nil {
			qrWait = *o.Wait
		}
		qWait := swag.FormatBool(qrWait)
		if qWait != "" {
			if err := r.SetQueryParam("wait", qWait); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
