// Code generated by go-swagger; DO NOT EDIT.

package debugrequest

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new debugrequest API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for debugrequest API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateDebugRequest returns a debug attachment

Return a debug attachment
*/
func (a *Client) CreateDebugRequest(params *CreateDebugRequestParams) (*CreateDebugRequestCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDebugRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDebugRequest",
		Method:             "POST",
		PathPattern:        "/debugrequest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDebugRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateDebugRequestCreated), nil

}

/*
DeleteDebugRequest deletes a debug request

Delete a debug request.
*/
func (a *Client) DeleteDebugRequest(params *DeleteDebugRequestParams) (*DeleteDebugRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDebugRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDebugRequest",
		Method:             "DELETE",
		PathPattern:        "/debugrequest/{debugRequestId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDebugRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDebugRequestOK), nil

}

/*
GetDebugRequest gets a debug request

Get a debug request
*/
func (a *Client) GetDebugRequest(params *GetDebugRequestParams) (*GetDebugRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDebugRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDebugRequest",
		Method:             "GET",
		PathPattern:        "/debugrequest/{debugRequestId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDebugRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDebugRequestOK), nil

}

/*
GetDebugRequests returns all debug request

Return all debug requests
*/
func (a *Client) GetDebugRequests(params *GetDebugRequestsParams) (*GetDebugRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDebugRequestsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDebugRequests",
		Method:             "GET",
		PathPattern:        "/debugrequest",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDebugRequestsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDebugRequestsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
