package debugconfig

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPopContainerToDebugParams creates a new PopContainerToDebugParams object
// with the default values initialized.
func NewPopContainerToDebugParams() *PopContainerToDebugParams {
	var ()
	return &PopContainerToDebugParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPopContainerToDebugParamsWithTimeout creates a new PopContainerToDebugParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPopContainerToDebugParamsWithTimeout(timeout time.Duration) *PopContainerToDebugParams {
	var ()
	return &PopContainerToDebugParams{

		timeout: timeout,
	}
}

// NewPopContainerToDebugParamsWithContext creates a new PopContainerToDebugParams object
// with the default values initialized, and the ability to set a context for a request
func NewPopContainerToDebugParamsWithContext(ctx context.Context) *PopContainerToDebugParams {
	var ()
	return &PopContainerToDebugParams{

		Context: ctx,
	}
}

// NewPopContainerToDebugParamsWithHTTPClient creates a new PopContainerToDebugParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPopContainerToDebugParamsWithHTTPClient(client *http.Client) *PopContainerToDebugParams {
	var ()
	return &PopContainerToDebugParams{
		HTTPClient: client,
	}
}

/*PopContainerToDebugParams contains all the parameters to send to the API endpoint
for the pop container to debug operation typically these are written to a http.Request
*/
type PopContainerToDebugParams struct {

	/*Node
	  ID the node we are watching

	*/
	Node string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the pop container to debug params
func (o *PopContainerToDebugParams) WithTimeout(timeout time.Duration) *PopContainerToDebugParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the pop container to debug params
func (o *PopContainerToDebugParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the pop container to debug params
func (o *PopContainerToDebugParams) WithContext(ctx context.Context) *PopContainerToDebugParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the pop container to debug params
func (o *PopContainerToDebugParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the pop container to debug params
func (o *PopContainerToDebugParams) WithHTTPClient(client *http.Client) *PopContainerToDebugParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the pop container to debug params
func (o *PopContainerToDebugParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNode adds the node to the pop container to debug params
func (o *PopContainerToDebugParams) WithNode(node string) *PopContainerToDebugParams {
	o.SetNode(node)
	return o
}

// SetNode adds the node to the pop container to debug params
func (o *PopContainerToDebugParams) SetNode(node string) {
	o.Node = node
}

// WriteToRequest writes these params to a swagger request
func (o *PopContainerToDebugParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param node
	if err := r.SetPathParam("node", o.Node); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
