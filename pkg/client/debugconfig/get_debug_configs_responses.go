package debugconfig

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/solo-io/squash/pkg/models"
)

// GetDebugConfigsReader is a Reader for the GetDebugConfigs structure.
type GetDebugConfigsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDebugConfigsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetDebugConfigsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetDebugConfigsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetDebugConfigsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewGetDebugConfigsUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetDebugConfigsOK creates a GetDebugConfigsOK with default headers values
func NewGetDebugConfigsOK() *GetDebugConfigsOK {
	return &GetDebugConfigsOK{}
}

/*GetDebugConfigsOK handles this case with default header values.

OK
*/
type GetDebugConfigsOK struct {
	Payload []*models.DebugConfig
}

func (o *GetDebugConfigsOK) Error() string {
	return fmt.Sprintf("[GET /debugconfig][%d] getDebugConfigsOK  %+v", 200, o.Payload)
}

func (o *GetDebugConfigsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDebugConfigsBadRequest creates a GetDebugConfigsBadRequest with default headers values
func NewGetDebugConfigsBadRequest() *GetDebugConfigsBadRequest {
	return &GetDebugConfigsBadRequest{}
}

/*GetDebugConfigsBadRequest handles this case with default header values.

Invalid ID supplied
*/
type GetDebugConfigsBadRequest struct {
}

func (o *GetDebugConfigsBadRequest) Error() string {
	return fmt.Sprintf("[GET /debugconfig][%d] getDebugConfigsBadRequest ", 400)
}

func (o *GetDebugConfigsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDebugConfigsNotFound creates a GetDebugConfigsNotFound with default headers values
func NewGetDebugConfigsNotFound() *GetDebugConfigsNotFound {
	return &GetDebugConfigsNotFound{}
}

/*GetDebugConfigsNotFound handles this case with default header values.

Debug config not found
*/
type GetDebugConfigsNotFound struct {
}

func (o *GetDebugConfigsNotFound) Error() string {
	return fmt.Sprintf("[GET /debugconfig][%d] getDebugConfigsNotFound ", 404)
}

func (o *GetDebugConfigsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDebugConfigsUnprocessableEntity creates a GetDebugConfigsUnprocessableEntity with default headers values
func NewGetDebugConfigsUnprocessableEntity() *GetDebugConfigsUnprocessableEntity {
	return &GetDebugConfigsUnprocessableEntity{}
}

/*GetDebugConfigsUnprocessableEntity handles this case with default header values.

Validation exception
*/
type GetDebugConfigsUnprocessableEntity struct {
}

func (o *GetDebugConfigsUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /debugconfig][%d] getDebugConfigsUnprocessableEntity ", 422)
}

func (o *GetDebugConfigsUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
