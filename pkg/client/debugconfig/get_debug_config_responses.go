package debugconfig

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/solo-io/squash/pkg/models"
)

// GetDebugConfigReader is a Reader for the GetDebugConfig structure.
type GetDebugConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDebugConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetDebugConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetDebugConfigBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetDebugConfigNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewGetDebugConfigUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetDebugConfigOK creates a GetDebugConfigOK with default headers values
func NewGetDebugConfigOK() *GetDebugConfigOK {
	return &GetDebugConfigOK{}
}

/*GetDebugConfigOK handles this case with default header values.

OK
*/
type GetDebugConfigOK struct {
	Payload *models.DebugConfig
}

func (o *GetDebugConfigOK) Error() string {
	return fmt.Sprintf("[GET /debugconfig/{debugConfigId}][%d] getDebugConfigOK  %+v", 200, o.Payload)
}

func (o *GetDebugConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DebugConfig)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDebugConfigBadRequest creates a GetDebugConfigBadRequest with default headers values
func NewGetDebugConfigBadRequest() *GetDebugConfigBadRequest {
	return &GetDebugConfigBadRequest{}
}

/*GetDebugConfigBadRequest handles this case with default header values.

Invalid ID supplied
*/
type GetDebugConfigBadRequest struct {
}

func (o *GetDebugConfigBadRequest) Error() string {
	return fmt.Sprintf("[GET /debugconfig/{debugConfigId}][%d] getDebugConfigBadRequest ", 400)
}

func (o *GetDebugConfigBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDebugConfigNotFound creates a GetDebugConfigNotFound with default headers values
func NewGetDebugConfigNotFound() *GetDebugConfigNotFound {
	return &GetDebugConfigNotFound{}
}

/*GetDebugConfigNotFound handles this case with default header values.

Debug config not found
*/
type GetDebugConfigNotFound struct {
}

func (o *GetDebugConfigNotFound) Error() string {
	return fmt.Sprintf("[GET /debugconfig/{debugConfigId}][%d] getDebugConfigNotFound ", 404)
}

func (o *GetDebugConfigNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDebugConfigUnprocessableEntity creates a GetDebugConfigUnprocessableEntity with default headers values
func NewGetDebugConfigUnprocessableEntity() *GetDebugConfigUnprocessableEntity {
	return &GetDebugConfigUnprocessableEntity{}
}

/*GetDebugConfigUnprocessableEntity handles this case with default header values.

Validation exception
*/
type GetDebugConfigUnprocessableEntity struct {
}

func (o *GetDebugConfigUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /debugconfig/{debugConfigId}][%d] getDebugConfigUnprocessableEntity ", 422)
}

func (o *GetDebugConfigUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
