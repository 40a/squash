package debugconfig

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/solo-io/squash/pkg/models"
)

// UpdateDebugConfigReader is a Reader for the UpdateDebugConfig structure.
type UpdateDebugConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDebugConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateDebugConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateDebugConfigBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateDebugConfigNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewUpdateDebugConfigUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateDebugConfigOK creates a UpdateDebugConfigOK with default headers values
func NewUpdateDebugConfigOK() *UpdateDebugConfigOK {
	return &UpdateDebugConfigOK{}
}

/*UpdateDebugConfigOK handles this case with default header values.

OK
*/
type UpdateDebugConfigOK struct {
	Payload *models.DebugConfig
}

func (o *UpdateDebugConfigOK) Error() string {
	return fmt.Sprintf("[PATCH /debugconfig/{debugConfigId}][%d] updateDebugConfigOK  %+v", 200, o.Payload)
}

func (o *UpdateDebugConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DebugConfig)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDebugConfigBadRequest creates a UpdateDebugConfigBadRequest with default headers values
func NewUpdateDebugConfigBadRequest() *UpdateDebugConfigBadRequest {
	return &UpdateDebugConfigBadRequest{}
}

/*UpdateDebugConfigBadRequest handles this case with default header values.

Invalid ID supplied
*/
type UpdateDebugConfigBadRequest struct {
}

func (o *UpdateDebugConfigBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /debugconfig/{debugConfigId}][%d] updateDebugConfigBadRequest ", 400)
}

func (o *UpdateDebugConfigBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDebugConfigNotFound creates a UpdateDebugConfigNotFound with default headers values
func NewUpdateDebugConfigNotFound() *UpdateDebugConfigNotFound {
	return &UpdateDebugConfigNotFound{}
}

/*UpdateDebugConfigNotFound handles this case with default header values.

Debug config not found
*/
type UpdateDebugConfigNotFound struct {
}

func (o *UpdateDebugConfigNotFound) Error() string {
	return fmt.Sprintf("[PATCH /debugconfig/{debugConfigId}][%d] updateDebugConfigNotFound ", 404)
}

func (o *UpdateDebugConfigNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDebugConfigUnprocessableEntity creates a UpdateDebugConfigUnprocessableEntity with default headers values
func NewUpdateDebugConfigUnprocessableEntity() *UpdateDebugConfigUnprocessableEntity {
	return &UpdateDebugConfigUnprocessableEntity{}
}

/*UpdateDebugConfigUnprocessableEntity handles this case with default header values.

Validation exception
*/
type UpdateDebugConfigUnprocessableEntity struct {
}

func (o *UpdateDebugConfigUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /debugconfig/{debugConfigId}][%d] updateDebugConfigUnprocessableEntity ", 422)
}

func (o *UpdateDebugConfigUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
