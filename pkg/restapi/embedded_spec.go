package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

// SwaggerJSON embedded version of the swagger document used at generation time
var SwaggerJSON json.RawMessage

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Squash debugget api sample.",
    "title": "Squash Server",
    "contact": {
      "email": "apiteam@solo.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "basePath": "/api/v1",
  "paths": {
    "/debugconfig": {
      "get": {
        "description": "Retrun all debug configs",
        "tags": [
          "debugconfig"
        ],
        "summary": "Retrun all debug configs",
        "operationId": "getDebugConfigs",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DebugConfig"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Debug config not found"
          },
          "422": {
            "description": "Validation exception"
          }
        }
      },
      "post": {
        "description": "Add a debug config to squash. A debug config instrucs squash what containers should be debugged, and now. DebugConfig object consists of:\n  - Attachment: The object we are attaching to. either a specific container, or a service. \n  in the case of the service, the squash will attach to the first container that hits a debug event.\n  - Breakpoints: A list of breakpoints. When \"immediately\" set to false, squash will wait for a debug event\n  (i.e a program crash) before giving the user access to the remote debugger. If breakpoints is set, squash will place them and will notify when the first breakpoint hits.\n  - image: The container image we are debugging. this is used for extra validation, as placing breakpoints on the wrong binary can lead to unexpected results.\n  - debugger: Type of debugger to use. \"dlv\" and \"gdb\" are supported now.\n  - immediately: Weather to attach immediatly or wait for debug event. can only be set to true if attachment type is container.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "debugconfig"
        ],
        "summary": "Add a new debug configuration for squash server.",
        "operationId": "addDebugConfig",
        "parameters": [
          {
            "description": "DebugConfig object that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DebugConfig"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Debug config created",
            "schema": {
              "$ref": "#/definitions/DebugConfig"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Attachment not found"
          },
          "422": {
            "description": "Invalid input"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/debugconfig/platform/containers/{node}/latest": {
      "delete": {
        "tags": [
          "debugconfig"
        ],
        "summary": "Pop the latest debugconfig for a node in the cluster - this is used by the squash client.",
        "operationId": "popContainerToDebug",
        "parameters": [
          {
            "type": "string",
            "description": "ID the node we are watching",
            "name": "node",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DebugConfig"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Node note not found"
          },
          "408": {
            "description": "Timeout reached"
          }
        }
      }
    },
    "/debugconfig/{debugConfigId}": {
      "get": {
        "description": "Retrun a debug config",
        "tags": [
          "debugconfig"
        ],
        "summary": "Retrun a debug config",
        "operationId": "getDebugConfig",
        "parameters": [
          {
            "type": "string",
            "description": "ID of config to return",
            "name": "debugConfigId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DebugConfig"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Debug config not found"
          },
          "422": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "description": "Delete a debug config",
        "tags": [
          "debugconfig"
        ],
        "summary": "Delete a debug config",
        "operationId": "deleteDebugConfig",
        "parameters": [
          {
            "type": "string",
            "description": "ID of config to return",
            "name": "debugConfigId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Debug config not found"
          },
          "422": {
            "description": "Validation exception"
          }
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "debugconfig"
        ],
        "summary": "Update an existing debug config",
        "operationId": "updateDebugConfig",
        "parameters": [
          {
            "type": "string",
            "description": "ID of config to return",
            "name": "debugConfigId",
            "in": "path",
            "required": true
          },
          {
            "description": "debug config edited",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DebugConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DebugConfig"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Debug config not found"
          },
          "422": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/debugconfig/{debugConfigId}/session": {
      "put": {
        "description": "When a debugger is attached, it should create a new debug session object under the debug config  that caused the debug session. Only one debug session is allowed per debug config. Once a  session is added, The service will stop being watched, and new debug configs for the same service can be created again.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "debugsessions"
        ],
        "summary": "Add a new debug session - this is used by the squash client.",
        "operationId": "putDebugSession",
        "parameters": [
          {
            "type": "string",
            "description": "debug config id.",
            "name": "debugConfigId",
            "in": "path",
            "required": true
          },
          {
            "description": "the debug session.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DebugSession"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Debug session created",
            "schema": {
              "$ref": "#/definitions/DebugSession"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "debug config not found"
          },
          "412": {
            "description": "Debug state currently exists"
          },
          "422": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "description": "Long-poll and wait for a debug session to arrive.  The squash client will add a debug session to the debug config once a container associated with this  debug config generated a debug event.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "debugsessions"
        ],
        "summary": "Wait and for a debug session is available. when it is available it is returned and deleted",
        "operationId": "popDebugSession",
        "parameters": [
          {
            "type": "string",
            "description": "debug config id.",
            "name": "debugConfigId",
            "in": "path",
            "required": true
          },
          {
            "type": "number",
            "name": "X-Timeout",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Debug session returned",
            "schema": {
              "$ref": "#/definitions/DebugSession"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "debug config not found"
          },
          "408": {
            "description": "Timeout reached"
          }
        }
      }
    }
  },
  "definitions": {
    "Attachment": {
      "type": "object",
      "required": [
        "type",
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "service",
            "container"
          ]
        }
      }
    },
    "Breakpoint": {
      "type": "object",
      "required": [
        "location"
      ],
      "properties": {
        "location": {
          "type": "string"
        }
      }
    },
    "DebugConfig": {
      "type": "object",
      "required": [
        "attachment",
        "image"
      ],
      "properties": {
        "active": {
          "type": "boolean"
        },
        "attachment": {
          "$ref": "#/definitions/Attachment"
        },
        "breakpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Breakpoint"
          }
        },
        "debugger": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "immediately": {
          "type": "boolean"
        }
      }
    },
    "DebugSession": {
      "type": "object",
      "required": [
        "debugConfigId"
      ],
      "properties": {
        "debugConfigId": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    }
  },
  "tags": [
    {
      "description": "Everything about your debugconfig",
      "name": "debugconfig",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "description": "Everything about your debug sessions",
      "name": "debugsessions"
    }
  ],
  "externalDocs": {
    "description": "Find out more about Squash",
    "url": "https://github.com/solo-io/squash"
  }
}`))
}
