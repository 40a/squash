package debugconfig

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteDebugConfigHandlerFunc turns a function with the right signature into a delete debug config handler
type DeleteDebugConfigHandlerFunc func(DeleteDebugConfigParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteDebugConfigHandlerFunc) Handle(params DeleteDebugConfigParams) middleware.Responder {
	return fn(params)
}

// DeleteDebugConfigHandler interface for that can handle valid delete debug config params
type DeleteDebugConfigHandler interface {
	Handle(DeleteDebugConfigParams) middleware.Responder
}

// NewDeleteDebugConfig creates a new http.Handler for the delete debug config operation
func NewDeleteDebugConfig(ctx *middleware.Context, handler DeleteDebugConfigHandler) *DeleteDebugConfig {
	return &DeleteDebugConfig{Context: ctx, Handler: handler}
}

/*DeleteDebugConfig swagger:route DELETE /debugconfig/{debugConfigId} debugconfig deleteDebugConfig

Delete a debug config

Delete a debug config

*/
type DeleteDebugConfig struct {
	Context *middleware.Context
	Handler DeleteDebugConfigHandler
}

func (o *DeleteDebugConfig) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteDebugConfigParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
