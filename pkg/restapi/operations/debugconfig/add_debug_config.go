package debugconfig

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// AddDebugConfigHandlerFunc turns a function with the right signature into a add debug config handler
type AddDebugConfigHandlerFunc func(AddDebugConfigParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddDebugConfigHandlerFunc) Handle(params AddDebugConfigParams) middleware.Responder {
	return fn(params)
}

// AddDebugConfigHandler interface for that can handle valid add debug config params
type AddDebugConfigHandler interface {
	Handle(AddDebugConfigParams) middleware.Responder
}

// NewAddDebugConfig creates a new http.Handler for the add debug config operation
func NewAddDebugConfig(ctx *middleware.Context, handler AddDebugConfigHandler) *AddDebugConfig {
	return &AddDebugConfig{Context: ctx, Handler: handler}
}

/*AddDebugConfig swagger:route POST /debugconfig debugconfig addDebugConfig

Add a new debug configuration for squash server.

Add a debug config to squash. A debug config instrucs squash what containers should be debugged, and now. DebugConfig object consists of:
  - Attachment: The object we are attaching to. either a specific container, or a service.
  in the case of the service, the squash will attach to the first container that hits a debug event.
  - Breakpoints: A list of breakpoints. When "immediately" set to false, squash will wait for a debug event
  (i.e a program crash) before giving the user access to the remote debugger. If breakpoints is set, squash will place them and will notify when the first breakpoint hits.
  - image: The container image we are debugging. this is used for extra validation, as placing breakpoints on the wrong binary can lead to unexpected results.
  - debugger: Type of debugger to use. "dlv" and "gdb" are supported now.
  - immediately: Weather to attach immediatly or wait for debug event. can only be set to true if attachment type is container.


*/
type AddDebugConfig struct {
	Context *middleware.Context
	Handler AddDebugConfigHandler
}

func (o *AddDebugConfig) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddDebugConfigParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
