package debugconfig

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetDebugConfigsHandlerFunc turns a function with the right signature into a get debug configs handler
type GetDebugConfigsHandlerFunc func(GetDebugConfigsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDebugConfigsHandlerFunc) Handle(params GetDebugConfigsParams) middleware.Responder {
	return fn(params)
}

// GetDebugConfigsHandler interface for that can handle valid get debug configs params
type GetDebugConfigsHandler interface {
	Handle(GetDebugConfigsParams) middleware.Responder
}

// NewGetDebugConfigs creates a new http.Handler for the get debug configs operation
func NewGetDebugConfigs(ctx *middleware.Context, handler GetDebugConfigsHandler) *GetDebugConfigs {
	return &GetDebugConfigs{Context: ctx, Handler: handler}
}

/*GetDebugConfigs swagger:route GET /debugconfig debugconfig getDebugConfigs

Return all debug configs

Return all debug configs

*/
type GetDebugConfigs struct {
	Context *middleware.Context
	Handler GetDebugConfigsHandler
}

func (o *GetDebugConfigs) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetDebugConfigsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
