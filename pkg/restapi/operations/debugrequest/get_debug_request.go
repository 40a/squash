// Code generated by go-swagger; DO NOT EDIT.

package debugrequest

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetDebugRequestHandlerFunc turns a function with the right signature into a get debug request handler
type GetDebugRequestHandlerFunc func(GetDebugRequestParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDebugRequestHandlerFunc) Handle(params GetDebugRequestParams) middleware.Responder {
	return fn(params)
}

// GetDebugRequestHandler interface for that can handle valid get debug request params
type GetDebugRequestHandler interface {
	Handle(GetDebugRequestParams) middleware.Responder
}

// NewGetDebugRequest creates a new http.Handler for the get debug request operation
func NewGetDebugRequest(ctx *middleware.Context, handler GetDebugRequestHandler) *GetDebugRequest {
	return &GetDebugRequest{Context: ctx, Handler: handler}
}

/*GetDebugRequest swagger:route GET /debugrequest/{debugRequestId} debugrequest getDebugRequest

Get a debug request

Get a debug request

*/
type GetDebugRequest struct {
	Context *middleware.Context
	Handler GetDebugRequestHandler
}

func (o *GetDebugRequest) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetDebugRequestParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
