package debugsessions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PopDebugSessionHandlerFunc turns a function with the right signature into a pop debug session handler
type PopDebugSessionHandlerFunc func(PopDebugSessionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PopDebugSessionHandlerFunc) Handle(params PopDebugSessionParams) middleware.Responder {
	return fn(params)
}

// PopDebugSessionHandler interface for that can handle valid pop debug session params
type PopDebugSessionHandler interface {
	Handle(PopDebugSessionParams) middleware.Responder
}

// NewPopDebugSession creates a new http.Handler for the pop debug session operation
func NewPopDebugSession(ctx *middleware.Context, handler PopDebugSessionHandler) *PopDebugSession {
	return &PopDebugSession{Context: ctx, Handler: handler}
}

/*PopDebugSession swagger:route DELETE /debugconfig/{debugConfigId}/session debugsessions popDebugSession

Wait and for a debug session is available. when it is available it is returned and deleted

Long-poll and wait for a debug session to arrive.  The squash client will add a debug session to the debug config once a container associated with this  debug config generated a debug event.


*/
type PopDebugSession struct {
	Context *middleware.Context
	Handler PopDebugSessionHandler
}

func (o *PopDebugSession) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPopDebugSessionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
