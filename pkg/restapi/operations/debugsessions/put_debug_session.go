package debugsessions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PutDebugSessionHandlerFunc turns a function with the right signature into a put debug session handler
type PutDebugSessionHandlerFunc func(PutDebugSessionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutDebugSessionHandlerFunc) Handle(params PutDebugSessionParams) middleware.Responder {
	return fn(params)
}

// PutDebugSessionHandler interface for that can handle valid put debug session params
type PutDebugSessionHandler interface {
	Handle(PutDebugSessionParams) middleware.Responder
}

// NewPutDebugSession creates a new http.Handler for the put debug session operation
func NewPutDebugSession(ctx *middleware.Context, handler PutDebugSessionHandler) *PutDebugSession {
	return &PutDebugSession{Context: ctx, Handler: handler}
}

/*PutDebugSession swagger:route PUT /debugconfig/{debugConfigId}/session debugsessions putDebugSession

Add a new debug session - this is used by the squash client.

When a debugger is attached, it should create a new debug session object under the debug config  that caused the debug session. Only one debug session is allowed per debug config. Once a  session is added, The service will stop being watched, and new debug configs for the same service can be created again.


*/
type PutDebugSession struct {
	Context *middleware.Context
	Handler PutDebugSessionHandler
}

func (o *PutDebugSession) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutDebugSessionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
